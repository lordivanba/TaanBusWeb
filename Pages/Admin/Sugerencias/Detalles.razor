@page "/sugerencia/detalles/{id:int}/auth/{token}/{admin_id:int}"
@using Data.Models
@inject HttpClient http
@inject NavigationManager nav
@layout AdminLayout

<PageTitle>Detalles de sugerencia</PageTitle>

@if (Id != null && Admin_Id != null)
{
    <div class="d-flex justify-content-center">
        <div class="card shadow p-3 mb-5 bg-body rounded" style="width: 38rem;">
            <img src="\images\sugerencia.jpg" class="card-img-top rounded mx-auto d-block" style="width: 16rem; height: auto;">
            <div class="card-body">
                <h5 class="card-title">Sugerencia</h5>
                <h6 class="card-text">Descripcion: @sugerencia.Descripcion</h6>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Aportado por: @sugerencia.Ciudadano</li>
                <li class="list-group-item">Fecha de registro: @(sugerencia.FechaRegistro.ToString("yyyy-MM-dd"))</li>
                <li class="list-group-item">Estado de la sugerencia: @(sugerencia.Status == 1 ? "Aprobado" : sugerencia.Status == 2 ?
                "Rechazado" : "Pendiente")</li>
            </ul>
            <div class="card-body">
                <button @onclick="Rechazar" class="btn btn-danger">Rechazar</button>
                <button @onclick="Aprobar" class="btn btn-success">Aprobar</button>
                <button @onclick="Pendiente" class="btn btn-dark">Marcar como pendiente</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int? Id { get; set; }
    [Parameter] public string Token { get; set; }
    [Parameter] public int? Admin_Id { get; set; }

    SugerenciaModel? sugerencia = new SugerenciaModel();
    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            sugerencia = await http.GetFromJsonAsync<SugerenciaModel>($"api/sugerencia/{Id}");
        }
    }

    private async Task Aprobar()
    {
        try
        {
            sugerencia.Status = 1;
            await http.PutAsJsonAsync($"api/sugerencia/update_status/{Id}", sugerencia);
            nav.NavigateTo($"panel_administrativo/{Admin_Id}/{Token}/sugerencias");
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    private async Task Rechazar()
    {
        try
        {
            sugerencia.Status = 2;
            await http.PutAsJsonAsync($"api/sugerencia/update_status/{Id}", sugerencia);
            nav.NavigateTo($"panel_administrativo/{Admin_Id}/{Token}/sugerencias");
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }
    private async Task Pendiente()
    {
        try
        {
            sugerencia.Status = 0;
            await http.PutAsJsonAsync($"api/sugerencia/update_status/{Id}", sugerencia);
            nav.NavigateTo($"panel_administrativo/{Admin_Id}/{Token}/sugerencias");
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }
}